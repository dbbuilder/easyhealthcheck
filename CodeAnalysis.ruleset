<?xml version="1.0" encoding="utf-8"?>
<!-- Universal .NET API Code Analysis Rules -->
<RuleSet Name="Universal API Rules" Description="Comprehensive rules for .NET APIs with security, performance, and quality focus" ToolsVersion="17.0">
  
  <!-- Microsoft Code Analysis Rules -->
  <Rules AnalyzerId="Microsoft.CodeAnalysis.CSharp" RuleNamespace="Microsoft.CodeAnalysis.CSharp">
    <Rule Id="CS1591" Action="Info" />          <!-- Missing XML comment -->
    <Rule Id="CS8618" Action="Warning" />       <!-- Non-nullable field uninitialized -->
    <Rule Id="CS8625" Action="Warning" />       <!-- Cannot convert null literal -->
  </Rules>

  <!-- .NET API Design Rules -->
  <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers">
    <!-- Security Rules - Critical -->
    <Rule Id="CA2100" Action="Error" />         <!-- Review SQL queries for security vulnerabilities -->
    <Rule Id="CA2109" Action="Error" />         <!-- Review visible event handlers -->
    <Rule Id="CA2119" Action="Error" />         <!-- Seal methods that satisfy private interfaces -->
    <Rule Id="CA2153" Action="Error" />         <!-- Do not catch corrupted state exceptions -->
    <Rule Id="CA2300" Action="Error" />         <!-- Do not use insecure deserializer BinaryFormatter -->
    <Rule Id="CA2301" Action="Error" />         <!-- Do not call BinaryFormatter.Deserialize -->
    <Rule Id="CA2302" Action="Error" />         <!-- Ensure BinaryFormatter.Binder is set -->
    <Rule Id="CA2305" Action="Error" />         <!-- Do not use insecure deserializer LosFormatter -->
    <Rule Id="CA2310" Action="Error" />         <!-- Do not use insecure deserializer NetDataContractSerializer -->
    <Rule Id="CA2311" Action="Error" />         <!-- Do not deserialize without first setting NetDataContractSerializer.Binder -->
    <Rule Id="CA2312" Action="Error" />         <!-- Ensure NetDataContractSerializer.Binder is set before deserializing -->
    <Rule Id="CA2315" Action="Error" />         <!-- Do not use insecure deserializer ObjectStateFormatter -->
    <Rule Id="CA2321" Action="Error" />         <!-- Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver -->
    <Rule Id="CA2322" Action="Error" />         <!-- Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver -->
    <Rule Id="CA2326" Action="Error" />         <!-- Do not use TypeNameHandling values other than None -->
    <Rule Id="CA2327" Action="Error" />         <!-- Do not use insecure JsonSerializerSettings -->
    <Rule Id="CA2328" Action="Error" />         <!-- Ensure that JsonSerializerSettings are secure -->
    <Rule Id="CA2329" Action="Error" />         <!-- Do not deserialize with JsonSerializer using an insecure configuration -->
    <Rule Id="CA2330" Action="Error" />         <!-- Ensure that JsonSerializer has a secure configuration -->

    <!-- Performance Rules - Important -->
    <Rule Id="CA1805" Action="Warning" />       <!-- Do not initialize unnecessarily -->
    <Rule Id="CA1810" Action="Warning" />       <!-- Initialize reference type static fields inline -->
    <Rule Id="CA1813" Action="Warning" />       <!-- Avoid unsealed attributes -->
    <Rule Id="CA1814" Action="Warning" />       <!-- Prefer jagged arrays over multidimensional -->
    <Rule Id="CA1815" Action="Warning" />       <!-- Override equals and operator equals on value types -->
    <Rule Id="CA1819" Action="Warning" />       <!-- Properties should not return arrays -->
    <Rule Id="CA1820" Action="Warning" />       <!-- Test for empty strings using string length -->
    <Rule Id="CA1821" Action="Warning" />       <!-- Remove empty finalizers -->
    <Rule Id="CA1822" Action="Warning" />       <!-- Mark members as static -->
    <Rule Id="CA1823" Action="Warning" />       <!-- Avoid unused private fields -->
    <Rule Id="CA1824" Action="Warning" />       <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
    <Rule Id="CA1825" Action="Warning" />       <!-- Avoid zero-length array allocations -->
    <Rule Id="CA1826" Action="Warning" />       <!-- Do not use CountAsync when AnyAsync will do -->
    <Rule Id="CA1827" Action="Warning" />       <!-- Do not use Count when Any will do -->
    <Rule Id="CA1828" Action="Warning" />       <!-- Do not use CountAsync when AnyAsync will do -->
    <Rule Id="CA1829" Action="Warning" />       <!-- Use Length/Count property instead of Count() when available -->
    <Rule Id="CA1830" Action="Warning" />       <!-- Prefer strongly-typed Append and Insert method overloads on StringBuilder -->
    <Rule Id="CA1831" Action="Warning" />       <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1832" Action="Warning" />       <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1833" Action="Warning" />       <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1834" Action="Warning" />       <!-- Consider using 'StringBuilder.Append(char)' when applicable -->
    <Rule Id="CA1835" Action="Warning" />       <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' -->
    <Rule Id="CA1836" Action="Warning" />       <!-- Prefer IsEmpty over Count -->
    <Rule Id="CA1837" Action="Warning" />       <!-- Use 'Environment.ProcessId' instead of 'Process.GetCurrentProcess().Id' -->
    <Rule Id="CA1838" Action="Warning" />       <!-- Avoid 'StringBuilder' parameters for P/Invokes -->

    <!-- Design Rules - Important -->
    <Rule Id="CA1000" Action="Warning" />       <!-- Do not declare static members on generic types -->
    <Rule Id="CA1001" Action="Warning" />       <!-- Types that own disposable fields should be disposable -->
    <Rule Id="CA1002" Action="Warning" />       <!-- Do not expose generic lists -->
    <Rule Id="CA1003" Action="Warning" />       <!-- Use generic event handler instances -->
    <Rule Id="CA1005" Action="Warning" />       <!-- Avoid excessive parameters on generic types -->
    <Rule Id="CA1008" Action="Warning" />       <!-- Enums should have zero value -->
    <Rule Id="CA1010" Action="Warning" />       <!-- Collections should implement generic interface -->
    <Rule Id="CA1012" Action="Warning" />       <!-- Abstract types should not have constructors -->
    <Rule Id="CA1014" Action="None" />          <!-- Mark assemblies with CLSCompliant - Disabled for health check library -->
    <Rule Id="CA1016" Action="Warning" />       <!-- Mark assemblies with assembly version -->
    <Rule Id="CA1017" Action="Warning" />       <!-- Mark assemblies with ComVisible -->
    <Rule Id="CA1018" Action="Warning" />       <!-- Mark attributes with AttributeUsageAttribute -->
    <Rule Id="CA1019" Action="Warning" />       <!-- Define accessors for attribute arguments -->
    <Rule Id="CA1021" Action="Warning" />       <!-- Avoid out parameters -->
    <Rule Id="CA1024" Action="Warning" />       <!-- Use properties where appropriate -->
    <Rule Id="CA1027" Action="Warning" />       <!-- Mark enums with FlagsAttribute -->
    <Rule Id="CA1028" Action="Warning" />       <!-- Enum Storage should be Int32 -->
    <Rule Id="CA1030" Action="Warning" />       <!-- Use events where appropriate -->
    <Rule Id="CA1031" Action="Warning" />       <!-- Do not catch general exception types -->
    <Rule Id="CA1032" Action="Warning" />       <!-- Implement standard exception constructors -->
    <Rule Id="CA1033" Action="Warning" />       <!-- Interface methods should be callable by child types -->
    <Rule Id="CA1034" Action="Warning" />       <!-- Nested types should not be visible -->
    <Rule Id="CA1036" Action="Warning" />       <!-- Override methods on comparable types -->
    <Rule Id="CA1040" Action="Warning" />       <!-- Avoid empty interfaces -->
    <Rule Id="CA1041" Action="Warning" />       <!-- Provide ObsoleteAttribute message -->
    <Rule Id="CA1043" Action="Warning" />       <!-- Use Integral Or String Argument For Indexers -->
    <Rule Id="CA1044" Action="Warning" />       <!-- Properties should not be write only -->
    <Rule Id="CA1045" Action="Warning" />       <!-- Do not pass types by reference -->
    <Rule Id="CA1046" Action="Warning" />       <!-- Do not overload equality operator on reference types -->
    <Rule Id="CA1047" Action="Warning" />       <!-- Do not declare protected member in sealed type -->
    <Rule Id="CA1050" Action="Warning" />       <!-- Declare types in namespaces -->
    <Rule Id="CA1051" Action="Warning" />       <!-- Do not declare visible instance fields -->
    <Rule Id="CA1052" Action="Warning" />       <!-- Static holder types should be Static or NotInheritable -->
    <Rule Id="CA1054" Action="Warning" />       <!-- URI-like parameters should not be strings -->
    <Rule Id="CA1055" Action="Warning" />       <!-- URI-like return values should not be strings -->
    <Rule Id="CA1056" Action="Warning" />       <!-- URI-like properties should not be strings -->
    <Rule Id="CA1058" Action="Warning" />       <!-- Types should not extend certain base types -->
    <Rule Id="CA1060" Action="Warning" />       <!-- Move pinvokes to native methods class -->
    <Rule Id="CA1061" Action="Warning" />       <!-- Do not hide base class methods -->
    <Rule Id="CA1062" Action="Warning" />       <!-- Validate arguments of public methods -->
    <Rule Id="CA1063" Action="Warning" />       <!-- Implement IDisposable Correctly -->
    <Rule Id="CA1064" Action="Warning" />       <!-- Exceptions should be public -->
    <Rule Id="CA1065" Action="Warning" />       <!-- Do not raise exceptions in unexpected locations -->

    <!-- Globalization Rules -->
    <Rule Id="CA1303" Action="Info" />          <!-- Do not pass literals as localized parameters -->
    <Rule Id="CA1304" Action="Warning" />       <!-- Specify CultureInfo -->
    <Rule Id="CA1305" Action="Warning" />       <!-- Specify IFormatProvider -->
    <Rule Id="CA1307" Action="Warning" />       <!-- Specify StringComparison -->
    <Rule Id="CA1308" Action="Warning" />       <!-- Normalize strings to uppercase -->
    <Rule Id="CA1309" Action="Warning" />       <!-- Use ordinal string comparison -->

    <!-- Maintainability Rules -->
    <Rule Id="CA1501" Action="Warning" />       <!-- Avoid excessive inheritance -->
    <Rule Id="CA1502" Action="Warning" />       <!-- Avoid excessive complexity -->
    <Rule Id="CA1505" Action="Warning" />       <!-- Avoid unmaintainable code -->
    <Rule Id="CA1506" Action="Warning" />       <!-- Avoid excessive class coupling -->
    <Rule Id="CA1507" Action="Warning" />       <!-- Use nameof to express symbol names -->
    <Rule Id="CA1508" Action="Warning" />       <!-- Avoid dead conditional code -->
    <Rule Id="CA1509" Action="Warning" />       <!-- Invalid entry in code metrics rule specification file -->

    <!-- Naming Rules -->
    <Rule Id="CA1700" Action="Warning" />       <!-- Do not name enum values 'Reserved' -->
    <Rule Id="CA1707" Action="Warning" />       <!-- Identifiers should not contain underscores -->
    <Rule Id="CA1708" Action="Warning" />       <!-- Identifiers should differ by more than case -->
    <Rule Id="CA1710" Action="Warning" />       <!-- Identifiers should have correct suffix -->
    <Rule Id="CA1711" Action="Warning" />       <!-- Identifiers should not have incorrect suffix -->
    <Rule Id="CA1712" Action="Warning" />       <!-- Do not prefix enum values with type name -->
    <Rule Id="CA1713" Action="Warning" />       <!-- Events should not have 'Before' or 'After' prefix -->
    <Rule Id="CA1714" Action="Warning" />       <!-- Flags enums should have plural names -->
    <Rule Id="CA1715" Action="Warning" />       <!-- Identifiers should have correct prefix -->
    <Rule Id="CA1716" Action="Warning" />       <!-- Identifiers should not match keywords -->
    <Rule Id="CA1717" Action="Warning" />       <!-- Only FlagsAttribute enums should have plural names -->
    <Rule Id="CA1720" Action="Warning" />       <!-- Identifier contains type name -->
    <Rule Id="CA1721" Action="Warning" />       <!-- Property names should not match get methods -->
    <Rule Id="CA1724" Action="Warning" />       <!-- Type names should not match namespaces -->
    <Rule Id="CA1725" Action="Warning" />       <!-- Parameter names should match base declaration -->

    <!-- Reliability Rules -->
    <Rule Id="CA2000" Action="Warning" />       <!-- Dispose objects before losing scope -->
    <Rule Id="CA2002" Action="Warning" />       <!-- Do not lock on objects with weak identity -->
    <Rule Id="CA2007" Action="Warning" />       <!-- Consider calling ConfigureAwait on the awaited task -->
    <Rule Id="CA2008" Action="Warning" />       <!-- Do not create tasks without passing a TaskScheduler -->
    <Rule Id="CA2009" Action="Warning" />       <!-- Do not call ToImmutableCollection on an ImmutableCollection value -->
    <Rule Id="CA2011" Action="Warning" />       <!-- Avoid infinite recursion -->
    <Rule Id="CA2012" Action="Warning" />       <!-- Use ValueTasks correctly -->
    <Rule Id="CA2013" Action="Warning" />       <!-- Do not use ReferenceEquals with value types -->
    <Rule Id="CA2014" Action="Warning" />       <!-- Do not use stackalloc in loops -->
    <Rule Id="CA2015" Action="Warning" />       <!-- Do not define finalizers for types derived from MemoryManager<T> -->
    <Rule Id="CA2016" Action="Warning" />       <!-- Forward the 'CancellationToken' parameter to methods -->

    <!-- Usage Rules -->
    <Rule Id="CA2200" Action="Warning" />       <!-- Rethrow to preserve stack details -->
    <Rule Id="CA2201" Action="Warning" />       <!-- Do not raise reserved exception types -->
    <Rule Id="CA2207" Action="Warning" />       <!-- Initialize value type static fields inline -->
    <Rule Id="CA2208" Action="Warning" />       <!-- Instantiate argument exceptions correctly -->
    <Rule Id="CA2211" Action="Warning" />       <!-- Non-constant fields should not be visible -->
    <Rule Id="CA2213" Action="Warning" />       <!-- Disposable fields should be disposed -->
    <Rule Id="CA2214" Action="Warning" />       <!-- Do not call overridable methods in constructors -->
    <Rule Id="CA2215" Action="Warning" />       <!-- Dispose methods should call base class dispose -->
    <Rule Id="CA2216" Action="Warning" />       <!-- Disposable types should declare finalizer -->
    <Rule Id="CA2217" Action="Warning" />       <!-- Do not mark enums with FlagsAttribute -->
    <Rule Id="CA2218" Action="Warning" />       <!-- Override GetHashCode on overriding Equals -->
    <Rule Id="CA2219" Action="Warning" />       <!-- Do not raise exceptions in finally clauses -->
    <Rule Id="CA2224" Action="Warning" />       <!-- Override Equals on overloading operator equals -->
    <Rule Id="CA2225" Action="Warning" />       <!-- Operator overloads have named alternates -->
    <Rule Id="CA2226" Action="Warning" />       <!-- Operators should have symmetrical overloads -->
    <Rule Id="CA2227" Action="Warning" />       <!-- Collection properties should be read only -->
    <Rule Id="CA2229" Action="Warning" />       <!-- Implement serialization constructors -->
    <Rule Id="CA2231" Action="Warning" />       <!-- Overload operator equals on overriding value type Equals -->
    <Rule Id="CA2234" Action="Warning" />       <!-- Pass system uri objects instead of strings -->
    <Rule Id="CA2235" Action="Warning" />       <!-- Mark all non-serializable fields -->
    <Rule Id="CA2237" Action="Warning" />       <!-- Mark ISerializable types with serializable -->
    <Rule Id="CA2241" Action="Warning" />       <!-- Provide correct arguments to formatting methods -->
    <Rule Id="CA2242" Action="Warning" />       <!-- Test for NaN correctly -->
    <Rule Id="CA2243" Action="Warning" />       <!-- Attribute string literals should parse correctly -->
    <Rule Id="CA2244" Action="Warning" />       <!-- Do not duplicate indexed element initializations -->
    <Rule Id="CA2245" Action="Warning" />       <!-- Do not assign a property to itself -->
    <Rule Id="CA2246" Action="Warning" />       <!-- Assigning symbol and its member in the same statement -->
    <Rule Id="CA2247" Action="Warning" />       <!-- Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum -->
    <Rule Id="CA2248" Action="Warning" />       <!-- Provide correct 'enum' argument to 'Enum.HasFlag' -->
    <Rule Id="CA2249" Action="Warning" />       <!-- Consider using 'string.Contains' instead of 'string.IndexOf' -->
    <Rule Id="CA2250" Action="Warning" />       <!-- Use 'ThrowIfCancellationRequested' -->
  </Rules>

  <!-- Security Code Scan Rules -->
  <Rules AnalyzerId="SecurityCodeScan.VS2019" RuleNamespace="SecurityCodeScan.VS2019">
    <Rule Id="SCS0001" Action="Error" />        <!-- Command injection possible -->
    <Rule Id="SCS0002" Action="Error" />        <!-- SQL injection possible -->
    <Rule Id="SCS0003" Action="Error" />        <!-- XPath injection possible -->
    <Rule Id="SCS0004" Action="Error" />        <!-- Certificate validation disabled -->
    <Rule Id="SCS0005" Action="Error" />        <!-- Weak random number generator -->
    <Rule Id="SCS0006" Action="Error" />        <!-- Weak hashing function -->
    <Rule Id="SCS0007" Action="Error" />        <!-- XML External Entity (XXE) -->
    <Rule Id="SCS0008" Action="Error" />        <!-- Cookie without HttpOnly flag -->
    <Rule Id="SCS0009" Action="Error" />        <!-- Cookie without Secure flag -->
    <Rule Id="SCS0010" Action="Error" />        <!-- Weak cipher algorithm -->
    <Rule Id="SCS0011" Action="Error" />        <!-- CBC padding oracle -->
    <Rule Id="SCS0012" Action="Error" />        <!-- ECB cipher mode -->
    <Rule Id="SCS0013" Action="Error" />        <!-- Weak cipher key size -->
    <Rule Id="SCS0014" Action="Error" />        <!-- Weak symmetric encryption -->
    <Rule Id="SCS0015" Action="Error" />        <!-- Hardcoded password -->
    <Rule Id="SCS0016" Action="Error" />        <!-- Controller method is vulnerable to CSRF -->
    <Rule Id="SCS0017" Action="Error" />        <!-- Request validation disabled -->
    <Rule Id="SCS0018" Action="Error" />        <!-- Path traversal -->
    <Rule Id="SCS0019" Action="Error" />        <!-- OutputCache annotation -->
    <Rule Id="SCS0020" Action="Error" />        <!-- Weak hash library -->
    <Rule Id="SCS0021" Action="Error" />        <!-- Request validation is enabled only for pages -->
    <Rule Id="SCS0022" Action="Error" />        <!-- Event validation is disabled -->
    <Rule Id="SCS0023" Action="Error" />        <!-- View state not encrypted -->
    <Rule Id="SCS0024" Action="Error" />        <!-- View state MAC disabled -->
    <Rule Id="SCS0025" Action="Error" />        <!-- Identity password lockout disabled -->
    <Rule Id="SCS0026" Action="Error" />        <!-- Identity weak password complexity -->
    <Rule Id="SCS0027" Action="Error" />        <!-- Open redirect -->
    <Rule Id="SCS0028" Action="Error" />        <!-- Unsafe deserialization -->
    <Rule Id="SCS0029" Action="Error" />        <!-- XSS possible -->
    <Rule Id="SCS0030" Action="Error" />        <!-- Request validation disabled in config -->
    <Rule Id="SCS0031" Action="Error" />        <!-- LDAP injection -->
    <Rule Id="SCS0032" Action="Error" />        <!-- Insecure random -->
    <Rule Id="SCS0033" Action="Error" />        <!-- CSRF token validation disabled -->
    <Rule Id="SCS0034" Action="Error" />        <!-- Insecure deserialization -->
    <Rule Id="SCS0035" Action="Error" />        <!-- Weak encryption -->
    <Rule Id="SCS0036" Action="Error" />        <!-- Weak hashing -->
  </Rules>

  <!-- SonarAnalyzer Rules -->
  <Rules AnalyzerId="SonarAnalyzer.CSharp" RuleNamespace="SonarAnalyzer.CSharp">
    <!-- Critical Security Rules -->
    <Rule Id="S2068" Action="Error" />         <!-- Credentials should not be hard-coded -->
    <Rule Id="S4423" Action="Error" />         <!-- Weak SSL/TLS protocols should not be used -->
    <Rule Id="S4426" Action="Error" />         <!-- Cryptographic keys should be robust -->
    <Rule Id="S5042" Action="Error" />         <!-- Zip Slip vulnerability -->
    <Rule Id="S5122" Action="Error" />         <!-- Cross-origin requests should be carefully controlled -->
    <Rule Id="S5146" Action="Error" />         <!-- Public methods should not have multidimensional array parameters -->
    <Rule Id="S2077" Action="Error" />         <!-- Formatting SQL queries is security-sensitive -->
    <Rule Id="S3649" Action="Error" />         <!-- User-provided values should be sanitized before use in SQL statements -->
    
    <!-- High Priority Rules -->
    <Rule Id="S1186" Action="Warning" />       <!-- Methods should not be empty -->
    <Rule Id="S1118" Action="Warning" />       <!-- Utility classes should not have public constructors -->
    <Rule Id="S1168" Action="Warning" />       <!-- Empty arrays and collections should be returned instead of null -->
    <Rule Id="S2259" Action="Warning" />       <!-- Null pointers should not be dereferenced -->
    <Rule Id="S2583" Action="Warning" />       <!-- Conditionally executed code should be reachable -->
    <Rule Id="S3776" Action="Warning" />       <!-- Cognitive Complexity of methods should not be too high -->
    <Rule Id="S1134" Action="Info" />          <!-- Track uses of "FIXME" tags -->
    <Rule Id="S1135" Action="Info" />          <!-- Track uses of "TODO" tags -->
  </Rules>

  <!-- Roslynator Rules -->
  <Rules AnalyzerId="Roslynator.CSharp.Analyzers" RuleNamespace="Roslynator.CSharp.Analyzers">
    <Rule Id="RCS1001" Action="Info" />        <!-- Add braces to declaration of multi-line event -->
    <Rule Id="RCS1003" Action="Info" />        <!-- Add braces to if-else -->
    <Rule Id="RCS1006" Action="Info" />        <!-- Merge 'else' with nested 'if' -->
    <Rule Id="RCS1007" Action="Info" />        <!-- Add braces -->
    <Rule Id="RCS1009" Action="Info" />        <!-- Use explicit type instead of 'var' -->
    <Rule Id="RCS1010" Action="Info" />        <!-- Use 'var' instead of explicit type -->
    <Rule Id="RCS1014" Action="Info" />        <!-- Use explicitly typed array -->
    <Rule Id="RCS1018" Action="Info" />        <!-- Add accessibility modifiers -->
    <Rule Id="RCS1037" Action="Info" />        <!-- Remove trailing white-space -->
    <Rule Id="RCS1055" Action="Warning" />     <!-- Avoid semicolon at the end of declaration -->
    <Rule Id="RCS1080" Action="Warning" />     <!-- Use 'Count/Length' property instead of 'Any' method -->
    <Rule Id="RCS1146" Action="Warning" />     <!-- Use conditional access -->
    <Rule Id="RCS1194" Action="Warning" />     <!-- Implement exception constructors -->
  </Rules>

  <!-- Threading Rules -->
  <Rules AnalyzerId="Microsoft.VisualStudio.Threading.Analyzers" RuleNamespace="Microsoft.VisualStudio.Threading.Analyzers">
    <Rule Id="VSTHRD002" Action="Warning" />   <!-- Avoid problematic synchronous waits -->
    <Rule Id="VSTHRD003" Action="Warning" />   <!-- Avoid awaiting foreign Tasks -->
    <Rule Id="VSTHRD011" Action="Warning" />   <!-- Use AsyncLazy<T> -->
    <Rule Id="VSTHRD100" Action="Warning" />   <!-- Avoid async void methods -->
    <Rule Id="VSTHRD101" Action="Warning" />   <!-- Avoid unsupported async delegates -->
    <Rule Id="VSTHRD103" Action="Warning" />   <!-- Call async methods when in an async method -->
    <Rule Id="VSTHRD110" Action="Warning" />   <!-- Observe result of async calls -->
    <Rule Id="VSTHRD111" Action="Warning" />   <!-- Use ConfigureAwait(bool) -->
    <Rule Id="VSTHRD114" Action="Warning" />   <!-- Avoid returning a Task representing work you do not intend to complete -->
  </Rules>

  <!-- AsyncAwaitBestPractices Rules -->
  <Rules AnalyzerId="AsyncAwaitBestPractices.Analyzers" RuleNamespace="AsyncAwaitBestPractices.Analyzers">
    <Rule Id="AsyncAwaitBestPractices001" Action="Warning" />  <!-- Async method should end in 'Async' -->
    <Rule Id="AsyncAwaitBestPractices002" Action="Warning" />  <!-- Async methods should return Task -->
    <Rule Id="AsyncAwaitBestPractices003" Action="Warning" />  <!-- Fire and forget async method -->
    <Rule Id="AsyncAwaitBestPractices004" Action="Warning" />  <!-- ConfigureAwait(false) -->
  </Rules>

  <!-- StyleCop Rules - Relaxed for health check library -->
  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">
    <Rule Id="SA1633" Action="None" />         <!-- File header not required -->
    <Rule Id="SA1309" Action="None" />         <!-- Field names can start with underscore -->
    <Rule Id="SA1200" Action="None" />         <!-- Using statements location -->
    <Rule Id="SA1028" Action="None" />         <!-- Trailing whitespace -->
    <Rule Id="SA1649" Action="None" />         <!-- File name matching -->
    <Rule Id="SA1402" Action="None" />         <!-- Multiple types in file -->
    <Rule Id="SA1600" Action="Info" />         <!-- Elements should be documented - reduced to info -->
    <Rule Id="SA1210" Action="Info" />         <!-- Using directives should be ordered alphabetically -->
    <Rule Id="SA1101" Action="None" />         <!-- Prefix local calls with this -->
    <Rule Id="SA1513" Action="None" />         <!-- Closing brace should be followed by blank line -->
    <Rule Id="SA1629" Action="None" />         <!-- Documentation text should end with a period -->
    <Rule Id="SA1623" Action="None" />         <!-- Property summary documentation should match accessors -->
  </Rules>

  <!-- Meziantou Analyzer Rules - Relaxed -->
  <Rules AnalyzerId="Meziantou.Analyzer" RuleNamespace="Meziantou.Analyzer">
    <Rule Id="MA0048" Action="None" />         <!-- File name must match type name - disabled -->
  </Rules>

</RuleSet>